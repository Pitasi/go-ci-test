// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package ast

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	token "github.com/warden-protocol/wardenprotocol/api/shield/token"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Expression                   protoreflect.MessageDescriptor
	fd_Expression_identifier        protoreflect.FieldDescriptor
	fd_Expression_integer_literal   protoreflect.FieldDescriptor
	fd_Expression_boolean_literal   protoreflect.FieldDescriptor
	fd_Expression_string_literal    protoreflect.FieldDescriptor
	fd_Expression_array_literal     protoreflect.FieldDescriptor
	fd_Expression_call_expression   protoreflect.FieldDescriptor
	fd_Expression_infix_expression  protoreflect.FieldDescriptor
	fd_Expression_prefix_expression protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_Expression = File_shield_ast_ast_proto.Messages().ByName("Expression")
	fd_Expression_identifier = md_Expression.Fields().ByName("identifier")
	fd_Expression_integer_literal = md_Expression.Fields().ByName("integer_literal")
	fd_Expression_boolean_literal = md_Expression.Fields().ByName("boolean_literal")
	fd_Expression_string_literal = md_Expression.Fields().ByName("string_literal")
	fd_Expression_array_literal = md_Expression.Fields().ByName("array_literal")
	fd_Expression_call_expression = md_Expression.Fields().ByName("call_expression")
	fd_Expression_infix_expression = md_Expression.Fields().ByName("infix_expression")
	fd_Expression_prefix_expression = md_Expression.Fields().ByName("prefix_expression")
}

var _ protoreflect.Message = (*fastReflection_Expression)(nil)

type fastReflection_Expression Expression

func (x *Expression) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Expression)(x)
}

func (x *Expression) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Expression_messageType fastReflection_Expression_messageType
var _ protoreflect.MessageType = fastReflection_Expression_messageType{}

type fastReflection_Expression_messageType struct{}

func (x fastReflection_Expression_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Expression)(nil)
}
func (x fastReflection_Expression_messageType) New() protoreflect.Message {
	return new(fastReflection_Expression)
}
func (x fastReflection_Expression_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Expression
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Expression) Descriptor() protoreflect.MessageDescriptor {
	return md_Expression
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Expression) Type() protoreflect.MessageType {
	return _fastReflection_Expression_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Expression) New() protoreflect.Message {
	return new(fastReflection_Expression)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Expression) Interface() protoreflect.ProtoMessage {
	return (*Expression)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Expression) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Value != nil {
		switch o := x.Value.(type) {
		case *Expression_Identifier:
			v := o.Identifier
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Expression_identifier, value) {
				return
			}
		case *Expression_IntegerLiteral:
			v := o.IntegerLiteral
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Expression_integer_literal, value) {
				return
			}
		case *Expression_BooleanLiteral:
			v := o.BooleanLiteral
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Expression_boolean_literal, value) {
				return
			}
		case *Expression_StringLiteral:
			v := o.StringLiteral
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Expression_string_literal, value) {
				return
			}
		case *Expression_ArrayLiteral:
			v := o.ArrayLiteral
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Expression_array_literal, value) {
				return
			}
		case *Expression_CallExpression:
			v := o.CallExpression
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Expression_call_expression, value) {
				return
			}
		case *Expression_InfixExpression:
			v := o.InfixExpression
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Expression_infix_expression, value) {
				return
			}
		case *Expression_PrefixExpression:
			v := o.PrefixExpression
			value := protoreflect.ValueOfMessage(v.ProtoReflect())
			if !f(fd_Expression_prefix_expression, value) {
				return
			}
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Expression) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.Expression.identifier":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Expression_Identifier); ok {
			return true
		} else {
			return false
		}
	case "shield.ast.Expression.integer_literal":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Expression_IntegerLiteral); ok {
			return true
		} else {
			return false
		}
	case "shield.ast.Expression.boolean_literal":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Expression_BooleanLiteral); ok {
			return true
		} else {
			return false
		}
	case "shield.ast.Expression.string_literal":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Expression_StringLiteral); ok {
			return true
		} else {
			return false
		}
	case "shield.ast.Expression.array_literal":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Expression_ArrayLiteral); ok {
			return true
		} else {
			return false
		}
	case "shield.ast.Expression.call_expression":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Expression_CallExpression); ok {
			return true
		} else {
			return false
		}
	case "shield.ast.Expression.infix_expression":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Expression_InfixExpression); ok {
			return true
		} else {
			return false
		}
	case "shield.ast.Expression.prefix_expression":
		if x.Value == nil {
			return false
		} else if _, ok := x.Value.(*Expression_PrefixExpression); ok {
			return true
		} else {
			return false
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Expression"))
		}
		panic(fmt.Errorf("message shield.ast.Expression does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Expression) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.Expression.identifier":
		x.Value = nil
	case "shield.ast.Expression.integer_literal":
		x.Value = nil
	case "shield.ast.Expression.boolean_literal":
		x.Value = nil
	case "shield.ast.Expression.string_literal":
		x.Value = nil
	case "shield.ast.Expression.array_literal":
		x.Value = nil
	case "shield.ast.Expression.call_expression":
		x.Value = nil
	case "shield.ast.Expression.infix_expression":
		x.Value = nil
	case "shield.ast.Expression.prefix_expression":
		x.Value = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Expression"))
		}
		panic(fmt.Errorf("message shield.ast.Expression does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Expression) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.Expression.identifier":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*Identifier)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Expression_Identifier); ok {
			return protoreflect.ValueOfMessage(v.Identifier.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*Identifier)(nil).ProtoReflect())
		}
	case "shield.ast.Expression.integer_literal":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*IntegerLiteral)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Expression_IntegerLiteral); ok {
			return protoreflect.ValueOfMessage(v.IntegerLiteral.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*IntegerLiteral)(nil).ProtoReflect())
		}
	case "shield.ast.Expression.boolean_literal":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*BooleanLiteral)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Expression_BooleanLiteral); ok {
			return protoreflect.ValueOfMessage(v.BooleanLiteral.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*BooleanLiteral)(nil).ProtoReflect())
		}
	case "shield.ast.Expression.string_literal":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*StringLiteral)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Expression_StringLiteral); ok {
			return protoreflect.ValueOfMessage(v.StringLiteral.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*StringLiteral)(nil).ProtoReflect())
		}
	case "shield.ast.Expression.array_literal":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*ArrayLiteral)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Expression_ArrayLiteral); ok {
			return protoreflect.ValueOfMessage(v.ArrayLiteral.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*ArrayLiteral)(nil).ProtoReflect())
		}
	case "shield.ast.Expression.call_expression":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*CallExpression)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Expression_CallExpression); ok {
			return protoreflect.ValueOfMessage(v.CallExpression.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*CallExpression)(nil).ProtoReflect())
		}
	case "shield.ast.Expression.infix_expression":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*InfixExpression)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Expression_InfixExpression); ok {
			return protoreflect.ValueOfMessage(v.InfixExpression.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*InfixExpression)(nil).ProtoReflect())
		}
	case "shield.ast.Expression.prefix_expression":
		if x.Value == nil {
			return protoreflect.ValueOfMessage((*PrefixExpression)(nil).ProtoReflect())
		} else if v, ok := x.Value.(*Expression_PrefixExpression); ok {
			return protoreflect.ValueOfMessage(v.PrefixExpression.ProtoReflect())
		} else {
			return protoreflect.ValueOfMessage((*PrefixExpression)(nil).ProtoReflect())
		}
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Expression"))
		}
		panic(fmt.Errorf("message shield.ast.Expression does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Expression) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.Expression.identifier":
		cv := value.Message().Interface().(*Identifier)
		x.Value = &Expression_Identifier{Identifier: cv}
	case "shield.ast.Expression.integer_literal":
		cv := value.Message().Interface().(*IntegerLiteral)
		x.Value = &Expression_IntegerLiteral{IntegerLiteral: cv}
	case "shield.ast.Expression.boolean_literal":
		cv := value.Message().Interface().(*BooleanLiteral)
		x.Value = &Expression_BooleanLiteral{BooleanLiteral: cv}
	case "shield.ast.Expression.string_literal":
		cv := value.Message().Interface().(*StringLiteral)
		x.Value = &Expression_StringLiteral{StringLiteral: cv}
	case "shield.ast.Expression.array_literal":
		cv := value.Message().Interface().(*ArrayLiteral)
		x.Value = &Expression_ArrayLiteral{ArrayLiteral: cv}
	case "shield.ast.Expression.call_expression":
		cv := value.Message().Interface().(*CallExpression)
		x.Value = &Expression_CallExpression{CallExpression: cv}
	case "shield.ast.Expression.infix_expression":
		cv := value.Message().Interface().(*InfixExpression)
		x.Value = &Expression_InfixExpression{InfixExpression: cv}
	case "shield.ast.Expression.prefix_expression":
		cv := value.Message().Interface().(*PrefixExpression)
		x.Value = &Expression_PrefixExpression{PrefixExpression: cv}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Expression"))
		}
		panic(fmt.Errorf("message shield.ast.Expression does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Expression) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.Expression.identifier":
		if x.Value == nil {
			value := &Identifier{}
			oneofValue := &Expression_Identifier{Identifier: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Expression_Identifier:
			return protoreflect.ValueOfMessage(m.Identifier.ProtoReflect())
		default:
			value := &Identifier{}
			oneofValue := &Expression_Identifier{Identifier: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "shield.ast.Expression.integer_literal":
		if x.Value == nil {
			value := &IntegerLiteral{}
			oneofValue := &Expression_IntegerLiteral{IntegerLiteral: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Expression_IntegerLiteral:
			return protoreflect.ValueOfMessage(m.IntegerLiteral.ProtoReflect())
		default:
			value := &IntegerLiteral{}
			oneofValue := &Expression_IntegerLiteral{IntegerLiteral: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "shield.ast.Expression.boolean_literal":
		if x.Value == nil {
			value := &BooleanLiteral{}
			oneofValue := &Expression_BooleanLiteral{BooleanLiteral: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Expression_BooleanLiteral:
			return protoreflect.ValueOfMessage(m.BooleanLiteral.ProtoReflect())
		default:
			value := &BooleanLiteral{}
			oneofValue := &Expression_BooleanLiteral{BooleanLiteral: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "shield.ast.Expression.string_literal":
		if x.Value == nil {
			value := &StringLiteral{}
			oneofValue := &Expression_StringLiteral{StringLiteral: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Expression_StringLiteral:
			return protoreflect.ValueOfMessage(m.StringLiteral.ProtoReflect())
		default:
			value := &StringLiteral{}
			oneofValue := &Expression_StringLiteral{StringLiteral: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "shield.ast.Expression.array_literal":
		if x.Value == nil {
			value := &ArrayLiteral{}
			oneofValue := &Expression_ArrayLiteral{ArrayLiteral: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Expression_ArrayLiteral:
			return protoreflect.ValueOfMessage(m.ArrayLiteral.ProtoReflect())
		default:
			value := &ArrayLiteral{}
			oneofValue := &Expression_ArrayLiteral{ArrayLiteral: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "shield.ast.Expression.call_expression":
		if x.Value == nil {
			value := &CallExpression{}
			oneofValue := &Expression_CallExpression{CallExpression: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Expression_CallExpression:
			return protoreflect.ValueOfMessage(m.CallExpression.ProtoReflect())
		default:
			value := &CallExpression{}
			oneofValue := &Expression_CallExpression{CallExpression: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "shield.ast.Expression.infix_expression":
		if x.Value == nil {
			value := &InfixExpression{}
			oneofValue := &Expression_InfixExpression{InfixExpression: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Expression_InfixExpression:
			return protoreflect.ValueOfMessage(m.InfixExpression.ProtoReflect())
		default:
			value := &InfixExpression{}
			oneofValue := &Expression_InfixExpression{InfixExpression: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	case "shield.ast.Expression.prefix_expression":
		if x.Value == nil {
			value := &PrefixExpression{}
			oneofValue := &Expression_PrefixExpression{PrefixExpression: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
		switch m := x.Value.(type) {
		case *Expression_PrefixExpression:
			return protoreflect.ValueOfMessage(m.PrefixExpression.ProtoReflect())
		default:
			value := &PrefixExpression{}
			oneofValue := &Expression_PrefixExpression{PrefixExpression: value}
			x.Value = oneofValue
			return protoreflect.ValueOfMessage(value.ProtoReflect())
		}
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Expression"))
		}
		panic(fmt.Errorf("message shield.ast.Expression does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Expression) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.Expression.identifier":
		value := &Identifier{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.Expression.integer_literal":
		value := &IntegerLiteral{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.Expression.boolean_literal":
		value := &BooleanLiteral{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.Expression.string_literal":
		value := &StringLiteral{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.Expression.array_literal":
		value := &ArrayLiteral{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.Expression.call_expression":
		value := &CallExpression{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.Expression.infix_expression":
		value := &InfixExpression{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.Expression.prefix_expression":
		value := &PrefixExpression{}
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Expression"))
		}
		panic(fmt.Errorf("message shield.ast.Expression does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Expression) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	case "shield.ast.Expression.value":
		if x.Value == nil {
			return nil
		}
		switch x.Value.(type) {
		case *Expression_Identifier:
			return x.Descriptor().Fields().ByName("identifier")
		case *Expression_IntegerLiteral:
			return x.Descriptor().Fields().ByName("integer_literal")
		case *Expression_BooleanLiteral:
			return x.Descriptor().Fields().ByName("boolean_literal")
		case *Expression_StringLiteral:
			return x.Descriptor().Fields().ByName("string_literal")
		case *Expression_ArrayLiteral:
			return x.Descriptor().Fields().ByName("array_literal")
		case *Expression_CallExpression:
			return x.Descriptor().Fields().ByName("call_expression")
		case *Expression_InfixExpression:
			return x.Descriptor().Fields().ByName("infix_expression")
		case *Expression_PrefixExpression:
			return x.Descriptor().Fields().ByName("prefix_expression")
		}
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.Expression", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Expression) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Expression) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Expression) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Expression) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Expression)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		switch x := x.Value.(type) {
		case *Expression_Identifier:
			if x == nil {
				break
			}
			l = options.Size(x.Identifier)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Expression_IntegerLiteral:
			if x == nil {
				break
			}
			l = options.Size(x.IntegerLiteral)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Expression_BooleanLiteral:
			if x == nil {
				break
			}
			l = options.Size(x.BooleanLiteral)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Expression_StringLiteral:
			if x == nil {
				break
			}
			l = options.Size(x.StringLiteral)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Expression_ArrayLiteral:
			if x == nil {
				break
			}
			l = options.Size(x.ArrayLiteral)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Expression_CallExpression:
			if x == nil {
				break
			}
			l = options.Size(x.CallExpression)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Expression_InfixExpression:
			if x == nil {
				break
			}
			l = options.Size(x.InfixExpression)
			n += 1 + l + runtime.Sov(uint64(l))
		case *Expression_PrefixExpression:
			if x == nil {
				break
			}
			l = options.Size(x.PrefixExpression)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Expression)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		switch x := x.Value.(type) {
		case *Expression_Identifier:
			encoded, err := options.Marshal(x.Identifier)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		case *Expression_IntegerLiteral:
			encoded, err := options.Marshal(x.IntegerLiteral)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		case *Expression_BooleanLiteral:
			encoded, err := options.Marshal(x.BooleanLiteral)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		case *Expression_StringLiteral:
			encoded, err := options.Marshal(x.StringLiteral)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		case *Expression_ArrayLiteral:
			encoded, err := options.Marshal(x.ArrayLiteral)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		case *Expression_CallExpression:
			encoded, err := options.Marshal(x.CallExpression)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		case *Expression_InfixExpression:
			encoded, err := options.Marshal(x.InfixExpression)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		case *Expression_PrefixExpression:
			encoded, err := options.Marshal(x.PrefixExpression)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Expression)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Expression: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Expression: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &Identifier{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Expression_Identifier{v}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IntegerLiteral", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &IntegerLiteral{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Expression_IntegerLiteral{v}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BooleanLiteral", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &BooleanLiteral{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Expression_BooleanLiteral{v}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StringLiteral", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &StringLiteral{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Expression_StringLiteral{v}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ArrayLiteral", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &ArrayLiteral{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Expression_ArrayLiteral{v}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CallExpression", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &CallExpression{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Expression_CallExpression{v}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InfixExpression", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &InfixExpression{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Expression_InfixExpression{v}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrefixExpression", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				v := &PrefixExpression{}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], v); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				x.Value = &Expression_PrefixExpression{v}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Identifier       protoreflect.MessageDescriptor
	fd_Identifier_token protoreflect.FieldDescriptor
	fd_Identifier_value protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_Identifier = File_shield_ast_ast_proto.Messages().ByName("Identifier")
	fd_Identifier_token = md_Identifier.Fields().ByName("token")
	fd_Identifier_value = md_Identifier.Fields().ByName("value")
}

var _ protoreflect.Message = (*fastReflection_Identifier)(nil)

type fastReflection_Identifier Identifier

func (x *Identifier) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Identifier)(x)
}

func (x *Identifier) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Identifier_messageType fastReflection_Identifier_messageType
var _ protoreflect.MessageType = fastReflection_Identifier_messageType{}

type fastReflection_Identifier_messageType struct{}

func (x fastReflection_Identifier_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Identifier)(nil)
}
func (x fastReflection_Identifier_messageType) New() protoreflect.Message {
	return new(fastReflection_Identifier)
}
func (x fastReflection_Identifier_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Identifier
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Identifier) Descriptor() protoreflect.MessageDescriptor {
	return md_Identifier
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Identifier) Type() protoreflect.MessageType {
	return _fastReflection_Identifier_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Identifier) New() protoreflect.Message {
	return new(fastReflection_Identifier)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Identifier) Interface() protoreflect.ProtoMessage {
	return (*Identifier)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Identifier) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_Identifier_token, value) {
			return
		}
	}
	if x.Value != "" {
		value := protoreflect.ValueOfString(x.Value)
		if !f(fd_Identifier_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Identifier) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.Identifier.token":
		return x.Token != nil
	case "shield.ast.Identifier.value":
		return x.Value != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Identifier"))
		}
		panic(fmt.Errorf("message shield.ast.Identifier does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Identifier) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.Identifier.token":
		x.Token = nil
	case "shield.ast.Identifier.value":
		x.Value = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Identifier"))
		}
		panic(fmt.Errorf("message shield.ast.Identifier does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Identifier) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.Identifier.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.Identifier.value":
		value := x.Value
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Identifier"))
		}
		panic(fmt.Errorf("message shield.ast.Identifier does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Identifier) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.Identifier.token":
		x.Token = value.Message().Interface().(*token.Token)
	case "shield.ast.Identifier.value":
		x.Value = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Identifier"))
		}
		panic(fmt.Errorf("message shield.ast.Identifier does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Identifier) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.Identifier.token":
		if x.Token == nil {
			x.Token = new(token.Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "shield.ast.Identifier.value":
		panic(fmt.Errorf("field value of message shield.ast.Identifier is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Identifier"))
		}
		panic(fmt.Errorf("message shield.ast.Identifier does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Identifier) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.Identifier.token":
		m := new(token.Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.Identifier.value":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.Identifier"))
		}
		panic(fmt.Errorf("message shield.ast.Identifier does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Identifier) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.Identifier", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Identifier) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Identifier) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Identifier) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Identifier) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Identifier)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Value)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Identifier)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Value) > 0 {
			i -= len(x.Value)
			copy(dAtA[i:], x.Value)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Value)))
			i--
			dAtA[i] = 0x12
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Identifier)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Identifier: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Identifier: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &token.Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Value = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_IntegerLiteral       protoreflect.MessageDescriptor
	fd_IntegerLiteral_token protoreflect.FieldDescriptor
	fd_IntegerLiteral_value protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_IntegerLiteral = File_shield_ast_ast_proto.Messages().ByName("IntegerLiteral")
	fd_IntegerLiteral_token = md_IntegerLiteral.Fields().ByName("token")
	fd_IntegerLiteral_value = md_IntegerLiteral.Fields().ByName("value")
}

var _ protoreflect.Message = (*fastReflection_IntegerLiteral)(nil)

type fastReflection_IntegerLiteral IntegerLiteral

func (x *IntegerLiteral) ProtoReflect() protoreflect.Message {
	return (*fastReflection_IntegerLiteral)(x)
}

func (x *IntegerLiteral) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_IntegerLiteral_messageType fastReflection_IntegerLiteral_messageType
var _ protoreflect.MessageType = fastReflection_IntegerLiteral_messageType{}

type fastReflection_IntegerLiteral_messageType struct{}

func (x fastReflection_IntegerLiteral_messageType) Zero() protoreflect.Message {
	return (*fastReflection_IntegerLiteral)(nil)
}
func (x fastReflection_IntegerLiteral_messageType) New() protoreflect.Message {
	return new(fastReflection_IntegerLiteral)
}
func (x fastReflection_IntegerLiteral_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_IntegerLiteral
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_IntegerLiteral) Descriptor() protoreflect.MessageDescriptor {
	return md_IntegerLiteral
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_IntegerLiteral) Type() protoreflect.MessageType {
	return _fastReflection_IntegerLiteral_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_IntegerLiteral) New() protoreflect.Message {
	return new(fastReflection_IntegerLiteral)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_IntegerLiteral) Interface() protoreflect.ProtoMessage {
	return (*IntegerLiteral)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_IntegerLiteral) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_IntegerLiteral_token, value) {
			return
		}
	}
	if x.Value != "" {
		value := protoreflect.ValueOfString(x.Value)
		if !f(fd_IntegerLiteral_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_IntegerLiteral) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.IntegerLiteral.token":
		return x.Token != nil
	case "shield.ast.IntegerLiteral.value":
		return x.Value != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.IntegerLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.IntegerLiteral does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IntegerLiteral) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.IntegerLiteral.token":
		x.Token = nil
	case "shield.ast.IntegerLiteral.value":
		x.Value = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.IntegerLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.IntegerLiteral does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_IntegerLiteral) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.IntegerLiteral.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.IntegerLiteral.value":
		value := x.Value
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.IntegerLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.IntegerLiteral does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IntegerLiteral) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.IntegerLiteral.token":
		x.Token = value.Message().Interface().(*token.Token)
	case "shield.ast.IntegerLiteral.value":
		x.Value = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.IntegerLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.IntegerLiteral does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IntegerLiteral) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.IntegerLiteral.token":
		if x.Token == nil {
			x.Token = new(token.Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "shield.ast.IntegerLiteral.value":
		panic(fmt.Errorf("field value of message shield.ast.IntegerLiteral is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.IntegerLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.IntegerLiteral does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_IntegerLiteral) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.IntegerLiteral.token":
		m := new(token.Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.IntegerLiteral.value":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.IntegerLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.IntegerLiteral does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_IntegerLiteral) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.IntegerLiteral", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_IntegerLiteral) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_IntegerLiteral) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_IntegerLiteral) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_IntegerLiteral) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*IntegerLiteral)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Value)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*IntegerLiteral)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Value) > 0 {
			i -= len(x.Value)
			copy(dAtA[i:], x.Value)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Value)))
			i--
			dAtA[i] = 0x12
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*IntegerLiteral)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IntegerLiteral: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: IntegerLiteral: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &token.Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Value = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BooleanLiteral       protoreflect.MessageDescriptor
	fd_BooleanLiteral_token protoreflect.FieldDescriptor
	fd_BooleanLiteral_value protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_BooleanLiteral = File_shield_ast_ast_proto.Messages().ByName("BooleanLiteral")
	fd_BooleanLiteral_token = md_BooleanLiteral.Fields().ByName("token")
	fd_BooleanLiteral_value = md_BooleanLiteral.Fields().ByName("value")
}

var _ protoreflect.Message = (*fastReflection_BooleanLiteral)(nil)

type fastReflection_BooleanLiteral BooleanLiteral

func (x *BooleanLiteral) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BooleanLiteral)(x)
}

func (x *BooleanLiteral) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BooleanLiteral_messageType fastReflection_BooleanLiteral_messageType
var _ protoreflect.MessageType = fastReflection_BooleanLiteral_messageType{}

type fastReflection_BooleanLiteral_messageType struct{}

func (x fastReflection_BooleanLiteral_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BooleanLiteral)(nil)
}
func (x fastReflection_BooleanLiteral_messageType) New() protoreflect.Message {
	return new(fastReflection_BooleanLiteral)
}
func (x fastReflection_BooleanLiteral_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BooleanLiteral
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BooleanLiteral) Descriptor() protoreflect.MessageDescriptor {
	return md_BooleanLiteral
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BooleanLiteral) Type() protoreflect.MessageType {
	return _fastReflection_BooleanLiteral_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BooleanLiteral) New() protoreflect.Message {
	return new(fastReflection_BooleanLiteral)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BooleanLiteral) Interface() protoreflect.ProtoMessage {
	return (*BooleanLiteral)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BooleanLiteral) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_BooleanLiteral_token, value) {
			return
		}
	}
	if x.Value != false {
		value := protoreflect.ValueOfBool(x.Value)
		if !f(fd_BooleanLiteral_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BooleanLiteral) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.BooleanLiteral.token":
		return x.Token != nil
	case "shield.ast.BooleanLiteral.value":
		return x.Value != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.BooleanLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.BooleanLiteral does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BooleanLiteral) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.BooleanLiteral.token":
		x.Token = nil
	case "shield.ast.BooleanLiteral.value":
		x.Value = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.BooleanLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.BooleanLiteral does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BooleanLiteral) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.BooleanLiteral.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.BooleanLiteral.value":
		value := x.Value
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.BooleanLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.BooleanLiteral does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BooleanLiteral) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.BooleanLiteral.token":
		x.Token = value.Message().Interface().(*token.Token)
	case "shield.ast.BooleanLiteral.value":
		x.Value = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.BooleanLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.BooleanLiteral does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BooleanLiteral) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.BooleanLiteral.token":
		if x.Token == nil {
			x.Token = new(token.Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "shield.ast.BooleanLiteral.value":
		panic(fmt.Errorf("field value of message shield.ast.BooleanLiteral is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.BooleanLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.BooleanLiteral does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BooleanLiteral) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.BooleanLiteral.token":
		m := new(token.Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.BooleanLiteral.value":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.BooleanLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.BooleanLiteral does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BooleanLiteral) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.BooleanLiteral", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BooleanLiteral) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BooleanLiteral) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BooleanLiteral) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BooleanLiteral) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BooleanLiteral)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Value {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BooleanLiteral)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Value {
			i--
			if x.Value {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BooleanLiteral)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BooleanLiteral: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BooleanLiteral: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &token.Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Value = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_StringLiteral       protoreflect.MessageDescriptor
	fd_StringLiteral_token protoreflect.FieldDescriptor
	fd_StringLiteral_value protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_StringLiteral = File_shield_ast_ast_proto.Messages().ByName("StringLiteral")
	fd_StringLiteral_token = md_StringLiteral.Fields().ByName("token")
	fd_StringLiteral_value = md_StringLiteral.Fields().ByName("value")
}

var _ protoreflect.Message = (*fastReflection_StringLiteral)(nil)

type fastReflection_StringLiteral StringLiteral

func (x *StringLiteral) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StringLiteral)(x)
}

func (x *StringLiteral) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StringLiteral_messageType fastReflection_StringLiteral_messageType
var _ protoreflect.MessageType = fastReflection_StringLiteral_messageType{}

type fastReflection_StringLiteral_messageType struct{}

func (x fastReflection_StringLiteral_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StringLiteral)(nil)
}
func (x fastReflection_StringLiteral_messageType) New() protoreflect.Message {
	return new(fastReflection_StringLiteral)
}
func (x fastReflection_StringLiteral_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StringLiteral
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StringLiteral) Descriptor() protoreflect.MessageDescriptor {
	return md_StringLiteral
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StringLiteral) Type() protoreflect.MessageType {
	return _fastReflection_StringLiteral_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StringLiteral) New() protoreflect.Message {
	return new(fastReflection_StringLiteral)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StringLiteral) Interface() protoreflect.ProtoMessage {
	return (*StringLiteral)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StringLiteral) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_StringLiteral_token, value) {
			return
		}
	}
	if x.Value != "" {
		value := protoreflect.ValueOfString(x.Value)
		if !f(fd_StringLiteral_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StringLiteral) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.StringLiteral.token":
		return x.Token != nil
	case "shield.ast.StringLiteral.value":
		return x.Value != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.StringLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.StringLiteral does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringLiteral) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.StringLiteral.token":
		x.Token = nil
	case "shield.ast.StringLiteral.value":
		x.Value = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.StringLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.StringLiteral does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StringLiteral) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.StringLiteral.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.StringLiteral.value":
		value := x.Value
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.StringLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.StringLiteral does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringLiteral) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.StringLiteral.token":
		x.Token = value.Message().Interface().(*token.Token)
	case "shield.ast.StringLiteral.value":
		x.Value = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.StringLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.StringLiteral does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringLiteral) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.StringLiteral.token":
		if x.Token == nil {
			x.Token = new(token.Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "shield.ast.StringLiteral.value":
		panic(fmt.Errorf("field value of message shield.ast.StringLiteral is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.StringLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.StringLiteral does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StringLiteral) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.StringLiteral.token":
		m := new(token.Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.StringLiteral.value":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.StringLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.StringLiteral does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StringLiteral) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.StringLiteral", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StringLiteral) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StringLiteral) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StringLiteral) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StringLiteral) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StringLiteral)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Value)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StringLiteral)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Value) > 0 {
			i -= len(x.Value)
			copy(dAtA[i:], x.Value)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Value)))
			i--
			dAtA[i] = 0x12
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StringLiteral)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StringLiteral: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StringLiteral: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &token.Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Value = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ArrayLiteral_2_list)(nil)

type _ArrayLiteral_2_list struct {
	list *[]*Expression
}

func (x *_ArrayLiteral_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ArrayLiteral_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ArrayLiteral_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Expression)
	(*x.list)[i] = concreteValue
}

func (x *_ArrayLiteral_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Expression)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ArrayLiteral_2_list) AppendMutable() protoreflect.Value {
	v := new(Expression)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ArrayLiteral_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ArrayLiteral_2_list) NewElement() protoreflect.Value {
	v := new(Expression)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ArrayLiteral_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ArrayLiteral          protoreflect.MessageDescriptor
	fd_ArrayLiteral_token    protoreflect.FieldDescriptor
	fd_ArrayLiteral_elements protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_ArrayLiteral = File_shield_ast_ast_proto.Messages().ByName("ArrayLiteral")
	fd_ArrayLiteral_token = md_ArrayLiteral.Fields().ByName("token")
	fd_ArrayLiteral_elements = md_ArrayLiteral.Fields().ByName("elements")
}

var _ protoreflect.Message = (*fastReflection_ArrayLiteral)(nil)

type fastReflection_ArrayLiteral ArrayLiteral

func (x *ArrayLiteral) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ArrayLiteral)(x)
}

func (x *ArrayLiteral) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ArrayLiteral_messageType fastReflection_ArrayLiteral_messageType
var _ protoreflect.MessageType = fastReflection_ArrayLiteral_messageType{}

type fastReflection_ArrayLiteral_messageType struct{}

func (x fastReflection_ArrayLiteral_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ArrayLiteral)(nil)
}
func (x fastReflection_ArrayLiteral_messageType) New() protoreflect.Message {
	return new(fastReflection_ArrayLiteral)
}
func (x fastReflection_ArrayLiteral_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ArrayLiteral
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ArrayLiteral) Descriptor() protoreflect.MessageDescriptor {
	return md_ArrayLiteral
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ArrayLiteral) Type() protoreflect.MessageType {
	return _fastReflection_ArrayLiteral_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ArrayLiteral) New() protoreflect.Message {
	return new(fastReflection_ArrayLiteral)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ArrayLiteral) Interface() protoreflect.ProtoMessage {
	return (*ArrayLiteral)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ArrayLiteral) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_ArrayLiteral_token, value) {
			return
		}
	}
	if len(x.Elements) != 0 {
		value := protoreflect.ValueOfList(&_ArrayLiteral_2_list{list: &x.Elements})
		if !f(fd_ArrayLiteral_elements, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ArrayLiteral) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.ArrayLiteral.token":
		return x.Token != nil
	case "shield.ast.ArrayLiteral.elements":
		return len(x.Elements) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.ArrayLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.ArrayLiteral does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ArrayLiteral) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.ArrayLiteral.token":
		x.Token = nil
	case "shield.ast.ArrayLiteral.elements":
		x.Elements = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.ArrayLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.ArrayLiteral does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ArrayLiteral) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.ArrayLiteral.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.ArrayLiteral.elements":
		if len(x.Elements) == 0 {
			return protoreflect.ValueOfList(&_ArrayLiteral_2_list{})
		}
		listValue := &_ArrayLiteral_2_list{list: &x.Elements}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.ArrayLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.ArrayLiteral does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ArrayLiteral) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.ArrayLiteral.token":
		x.Token = value.Message().Interface().(*token.Token)
	case "shield.ast.ArrayLiteral.elements":
		lv := value.List()
		clv := lv.(*_ArrayLiteral_2_list)
		x.Elements = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.ArrayLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.ArrayLiteral does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ArrayLiteral) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.ArrayLiteral.token":
		if x.Token == nil {
			x.Token = new(token.Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "shield.ast.ArrayLiteral.elements":
		if x.Elements == nil {
			x.Elements = []*Expression{}
		}
		value := &_ArrayLiteral_2_list{list: &x.Elements}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.ArrayLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.ArrayLiteral does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ArrayLiteral) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.ArrayLiteral.token":
		m := new(token.Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.ArrayLiteral.elements":
		list := []*Expression{}
		return protoreflect.ValueOfList(&_ArrayLiteral_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.ArrayLiteral"))
		}
		panic(fmt.Errorf("message shield.ast.ArrayLiteral does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ArrayLiteral) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.ArrayLiteral", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ArrayLiteral) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ArrayLiteral) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ArrayLiteral) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ArrayLiteral) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ArrayLiteral)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Elements) > 0 {
			for _, e := range x.Elements {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ArrayLiteral)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Elements) > 0 {
			for iNdEx := len(x.Elements) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Elements[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ArrayLiteral)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ArrayLiteral: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ArrayLiteral: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &token.Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Elements", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Elements = append(x.Elements, &Expression{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Elements[len(x.Elements)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_CallExpression_3_list)(nil)

type _CallExpression_3_list struct {
	list *[]*Expression
}

func (x *_CallExpression_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CallExpression_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CallExpression_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Expression)
	(*x.list)[i] = concreteValue
}

func (x *_CallExpression_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Expression)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CallExpression_3_list) AppendMutable() protoreflect.Value {
	v := new(Expression)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CallExpression_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CallExpression_3_list) NewElement() protoreflect.Value {
	v := new(Expression)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CallExpression_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_CallExpression           protoreflect.MessageDescriptor
	fd_CallExpression_token     protoreflect.FieldDescriptor
	fd_CallExpression_function  protoreflect.FieldDescriptor
	fd_CallExpression_arguments protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_CallExpression = File_shield_ast_ast_proto.Messages().ByName("CallExpression")
	fd_CallExpression_token = md_CallExpression.Fields().ByName("token")
	fd_CallExpression_function = md_CallExpression.Fields().ByName("function")
	fd_CallExpression_arguments = md_CallExpression.Fields().ByName("arguments")
}

var _ protoreflect.Message = (*fastReflection_CallExpression)(nil)

type fastReflection_CallExpression CallExpression

func (x *CallExpression) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CallExpression)(x)
}

func (x *CallExpression) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CallExpression_messageType fastReflection_CallExpression_messageType
var _ protoreflect.MessageType = fastReflection_CallExpression_messageType{}

type fastReflection_CallExpression_messageType struct{}

func (x fastReflection_CallExpression_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CallExpression)(nil)
}
func (x fastReflection_CallExpression_messageType) New() protoreflect.Message {
	return new(fastReflection_CallExpression)
}
func (x fastReflection_CallExpression_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CallExpression
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CallExpression) Descriptor() protoreflect.MessageDescriptor {
	return md_CallExpression
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CallExpression) Type() protoreflect.MessageType {
	return _fastReflection_CallExpression_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CallExpression) New() protoreflect.Message {
	return new(fastReflection_CallExpression)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CallExpression) Interface() protoreflect.ProtoMessage {
	return (*CallExpression)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CallExpression) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_CallExpression_token, value) {
			return
		}
	}
	if x.Function != nil {
		value := protoreflect.ValueOfMessage(x.Function.ProtoReflect())
		if !f(fd_CallExpression_function, value) {
			return
		}
	}
	if len(x.Arguments) != 0 {
		value := protoreflect.ValueOfList(&_CallExpression_3_list{list: &x.Arguments})
		if !f(fd_CallExpression_arguments, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CallExpression) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.CallExpression.token":
		return x.Token != nil
	case "shield.ast.CallExpression.function":
		return x.Function != nil
	case "shield.ast.CallExpression.arguments":
		return len(x.Arguments) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.CallExpression"))
		}
		panic(fmt.Errorf("message shield.ast.CallExpression does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CallExpression) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.CallExpression.token":
		x.Token = nil
	case "shield.ast.CallExpression.function":
		x.Function = nil
	case "shield.ast.CallExpression.arguments":
		x.Arguments = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.CallExpression"))
		}
		panic(fmt.Errorf("message shield.ast.CallExpression does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CallExpression) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.CallExpression.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.CallExpression.function":
		value := x.Function
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.CallExpression.arguments":
		if len(x.Arguments) == 0 {
			return protoreflect.ValueOfList(&_CallExpression_3_list{})
		}
		listValue := &_CallExpression_3_list{list: &x.Arguments}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.CallExpression"))
		}
		panic(fmt.Errorf("message shield.ast.CallExpression does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CallExpression) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.CallExpression.token":
		x.Token = value.Message().Interface().(*token.Token)
	case "shield.ast.CallExpression.function":
		x.Function = value.Message().Interface().(*Identifier)
	case "shield.ast.CallExpression.arguments":
		lv := value.List()
		clv := lv.(*_CallExpression_3_list)
		x.Arguments = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.CallExpression"))
		}
		panic(fmt.Errorf("message shield.ast.CallExpression does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CallExpression) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.CallExpression.token":
		if x.Token == nil {
			x.Token = new(token.Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "shield.ast.CallExpression.function":
		if x.Function == nil {
			x.Function = new(Identifier)
		}
		return protoreflect.ValueOfMessage(x.Function.ProtoReflect())
	case "shield.ast.CallExpression.arguments":
		if x.Arguments == nil {
			x.Arguments = []*Expression{}
		}
		value := &_CallExpression_3_list{list: &x.Arguments}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.CallExpression"))
		}
		panic(fmt.Errorf("message shield.ast.CallExpression does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CallExpression) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.CallExpression.token":
		m := new(token.Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.CallExpression.function":
		m := new(Identifier)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.CallExpression.arguments":
		list := []*Expression{}
		return protoreflect.ValueOfList(&_CallExpression_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.CallExpression"))
		}
		panic(fmt.Errorf("message shield.ast.CallExpression does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CallExpression) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.CallExpression", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CallExpression) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CallExpression) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CallExpression) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CallExpression) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CallExpression)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Function != nil {
			l = options.Size(x.Function)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Arguments) > 0 {
			for _, e := range x.Arguments {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CallExpression)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Arguments) > 0 {
			for iNdEx := len(x.Arguments) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Arguments[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.Function != nil {
			encoded, err := options.Marshal(x.Function)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CallExpression)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CallExpression: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CallExpression: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &token.Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Function", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Function == nil {
					x.Function = &Identifier{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Function); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Arguments", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Arguments = append(x.Arguments, &Expression{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Arguments[len(x.Arguments)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_InfixExpression          protoreflect.MessageDescriptor
	fd_InfixExpression_token    protoreflect.FieldDescriptor
	fd_InfixExpression_left     protoreflect.FieldDescriptor
	fd_InfixExpression_operator protoreflect.FieldDescriptor
	fd_InfixExpression_right    protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_InfixExpression = File_shield_ast_ast_proto.Messages().ByName("InfixExpression")
	fd_InfixExpression_token = md_InfixExpression.Fields().ByName("token")
	fd_InfixExpression_left = md_InfixExpression.Fields().ByName("left")
	fd_InfixExpression_operator = md_InfixExpression.Fields().ByName("operator")
	fd_InfixExpression_right = md_InfixExpression.Fields().ByName("right")
}

var _ protoreflect.Message = (*fastReflection_InfixExpression)(nil)

type fastReflection_InfixExpression InfixExpression

func (x *InfixExpression) ProtoReflect() protoreflect.Message {
	return (*fastReflection_InfixExpression)(x)
}

func (x *InfixExpression) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_InfixExpression_messageType fastReflection_InfixExpression_messageType
var _ protoreflect.MessageType = fastReflection_InfixExpression_messageType{}

type fastReflection_InfixExpression_messageType struct{}

func (x fastReflection_InfixExpression_messageType) Zero() protoreflect.Message {
	return (*fastReflection_InfixExpression)(nil)
}
func (x fastReflection_InfixExpression_messageType) New() protoreflect.Message {
	return new(fastReflection_InfixExpression)
}
func (x fastReflection_InfixExpression_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_InfixExpression
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_InfixExpression) Descriptor() protoreflect.MessageDescriptor {
	return md_InfixExpression
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_InfixExpression) Type() protoreflect.MessageType {
	return _fastReflection_InfixExpression_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_InfixExpression) New() protoreflect.Message {
	return new(fastReflection_InfixExpression)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_InfixExpression) Interface() protoreflect.ProtoMessage {
	return (*InfixExpression)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_InfixExpression) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_InfixExpression_token, value) {
			return
		}
	}
	if x.Left != nil {
		value := protoreflect.ValueOfMessage(x.Left.ProtoReflect())
		if !f(fd_InfixExpression_left, value) {
			return
		}
	}
	if x.Operator != "" {
		value := protoreflect.ValueOfString(x.Operator)
		if !f(fd_InfixExpression_operator, value) {
			return
		}
	}
	if x.Right != nil {
		value := protoreflect.ValueOfMessage(x.Right.ProtoReflect())
		if !f(fd_InfixExpression_right, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_InfixExpression) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.InfixExpression.token":
		return x.Token != nil
	case "shield.ast.InfixExpression.left":
		return x.Left != nil
	case "shield.ast.InfixExpression.operator":
		return x.Operator != ""
	case "shield.ast.InfixExpression.right":
		return x.Right != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.InfixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.InfixExpression does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InfixExpression) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.InfixExpression.token":
		x.Token = nil
	case "shield.ast.InfixExpression.left":
		x.Left = nil
	case "shield.ast.InfixExpression.operator":
		x.Operator = ""
	case "shield.ast.InfixExpression.right":
		x.Right = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.InfixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.InfixExpression does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_InfixExpression) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.InfixExpression.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.InfixExpression.left":
		value := x.Left
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.InfixExpression.operator":
		value := x.Operator
		return protoreflect.ValueOfString(value)
	case "shield.ast.InfixExpression.right":
		value := x.Right
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.InfixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.InfixExpression does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InfixExpression) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.InfixExpression.token":
		x.Token = value.Message().Interface().(*token.Token)
	case "shield.ast.InfixExpression.left":
		x.Left = value.Message().Interface().(*Expression)
	case "shield.ast.InfixExpression.operator":
		x.Operator = value.Interface().(string)
	case "shield.ast.InfixExpression.right":
		x.Right = value.Message().Interface().(*Expression)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.InfixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.InfixExpression does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InfixExpression) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.InfixExpression.token":
		if x.Token == nil {
			x.Token = new(token.Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "shield.ast.InfixExpression.left":
		if x.Left == nil {
			x.Left = new(Expression)
		}
		return protoreflect.ValueOfMessage(x.Left.ProtoReflect())
	case "shield.ast.InfixExpression.right":
		if x.Right == nil {
			x.Right = new(Expression)
		}
		return protoreflect.ValueOfMessage(x.Right.ProtoReflect())
	case "shield.ast.InfixExpression.operator":
		panic(fmt.Errorf("field operator of message shield.ast.InfixExpression is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.InfixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.InfixExpression does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_InfixExpression) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.InfixExpression.token":
		m := new(token.Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.InfixExpression.left":
		m := new(Expression)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.InfixExpression.operator":
		return protoreflect.ValueOfString("")
	case "shield.ast.InfixExpression.right":
		m := new(Expression)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.InfixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.InfixExpression does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_InfixExpression) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.InfixExpression", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_InfixExpression) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InfixExpression) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_InfixExpression) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_InfixExpression) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*InfixExpression)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Left != nil {
			l = options.Size(x.Left)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Operator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Right != nil {
			l = options.Size(x.Right)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*InfixExpression)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Right != nil {
			encoded, err := options.Marshal(x.Right)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Operator) > 0 {
			i -= len(x.Operator)
			copy(dAtA[i:], x.Operator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Operator)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Left != nil {
			encoded, err := options.Marshal(x.Left)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*InfixExpression)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InfixExpression: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InfixExpression: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &token.Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Left == nil {
					x.Left = &Expression{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Left); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Operator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Right == nil {
					x.Right = &Expression{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Right); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PrefixExpression          protoreflect.MessageDescriptor
	fd_PrefixExpression_token    protoreflect.FieldDescriptor
	fd_PrefixExpression_operator protoreflect.FieldDescriptor
	fd_PrefixExpression_right    protoreflect.FieldDescriptor
)

func init() {
	file_shield_ast_ast_proto_init()
	md_PrefixExpression = File_shield_ast_ast_proto.Messages().ByName("PrefixExpression")
	fd_PrefixExpression_token = md_PrefixExpression.Fields().ByName("token")
	fd_PrefixExpression_operator = md_PrefixExpression.Fields().ByName("operator")
	fd_PrefixExpression_right = md_PrefixExpression.Fields().ByName("right")
}

var _ protoreflect.Message = (*fastReflection_PrefixExpression)(nil)

type fastReflection_PrefixExpression PrefixExpression

func (x *PrefixExpression) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PrefixExpression)(x)
}

func (x *PrefixExpression) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_ast_ast_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PrefixExpression_messageType fastReflection_PrefixExpression_messageType
var _ protoreflect.MessageType = fastReflection_PrefixExpression_messageType{}

type fastReflection_PrefixExpression_messageType struct{}

func (x fastReflection_PrefixExpression_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PrefixExpression)(nil)
}
func (x fastReflection_PrefixExpression_messageType) New() protoreflect.Message {
	return new(fastReflection_PrefixExpression)
}
func (x fastReflection_PrefixExpression_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PrefixExpression
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PrefixExpression) Descriptor() protoreflect.MessageDescriptor {
	return md_PrefixExpression
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PrefixExpression) Type() protoreflect.MessageType {
	return _fastReflection_PrefixExpression_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PrefixExpression) New() protoreflect.Message {
	return new(fastReflection_PrefixExpression)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PrefixExpression) Interface() protoreflect.ProtoMessage {
	return (*PrefixExpression)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PrefixExpression) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_PrefixExpression_token, value) {
			return
		}
	}
	if x.Operator != "" {
		value := protoreflect.ValueOfString(x.Operator)
		if !f(fd_PrefixExpression_operator, value) {
			return
		}
	}
	if x.Right != nil {
		value := protoreflect.ValueOfMessage(x.Right.ProtoReflect())
		if !f(fd_PrefixExpression_right, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PrefixExpression) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.ast.PrefixExpression.token":
		return x.Token != nil
	case "shield.ast.PrefixExpression.operator":
		return x.Operator != ""
	case "shield.ast.PrefixExpression.right":
		return x.Right != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.PrefixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.PrefixExpression does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrefixExpression) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.ast.PrefixExpression.token":
		x.Token = nil
	case "shield.ast.PrefixExpression.operator":
		x.Operator = ""
	case "shield.ast.PrefixExpression.right":
		x.Right = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.PrefixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.PrefixExpression does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PrefixExpression) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.ast.PrefixExpression.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "shield.ast.PrefixExpression.operator":
		value := x.Operator
		return protoreflect.ValueOfString(value)
	case "shield.ast.PrefixExpression.right":
		value := x.Right
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.PrefixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.PrefixExpression does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrefixExpression) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.ast.PrefixExpression.token":
		x.Token = value.Message().Interface().(*token.Token)
	case "shield.ast.PrefixExpression.operator":
		x.Operator = value.Interface().(string)
	case "shield.ast.PrefixExpression.right":
		x.Right = value.Message().Interface().(*Expression)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.PrefixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.PrefixExpression does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrefixExpression) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.PrefixExpression.token":
		if x.Token == nil {
			x.Token = new(token.Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "shield.ast.PrefixExpression.right":
		if x.Right == nil {
			x.Right = new(Expression)
		}
		return protoreflect.ValueOfMessage(x.Right.ProtoReflect())
	case "shield.ast.PrefixExpression.operator":
		panic(fmt.Errorf("field operator of message shield.ast.PrefixExpression is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.PrefixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.PrefixExpression does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PrefixExpression) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.ast.PrefixExpression.token":
		m := new(token.Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "shield.ast.PrefixExpression.operator":
		return protoreflect.ValueOfString("")
	case "shield.ast.PrefixExpression.right":
		m := new(Expression)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.ast.PrefixExpression"))
		}
		panic(fmt.Errorf("message shield.ast.PrefixExpression does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PrefixExpression) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.ast.PrefixExpression", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PrefixExpression) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PrefixExpression) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PrefixExpression) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PrefixExpression) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PrefixExpression)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Operator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Right != nil {
			l = options.Size(x.Right)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PrefixExpression)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Right != nil {
			encoded, err := options.Marshal(x.Right)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Operator) > 0 {
			i -= len(x.Operator)
			copy(dAtA[i:], x.Operator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Operator)))
			i--
			dAtA[i] = 0x12
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PrefixExpression)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrefixExpression: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PrefixExpression: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &token.Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Operator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Right == nil {
					x.Right = &Expression{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Right); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: shield/ast/ast.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*Expression_Identifier
	//	*Expression_IntegerLiteral
	//	*Expression_BooleanLiteral
	//	*Expression_StringLiteral
	//	*Expression_ArrayLiteral
	//	*Expression_CallExpression
	//	*Expression_InfixExpression
	//	*Expression_PrefixExpression
	Value isExpression_Value `protobuf_oneof:"value"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{0}
}

func (x *Expression) GetValue() isExpression_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Expression) GetIdentifier() *Identifier {
	if x, ok := x.GetValue().(*Expression_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *Expression) GetIntegerLiteral() *IntegerLiteral {
	if x, ok := x.GetValue().(*Expression_IntegerLiteral); ok {
		return x.IntegerLiteral
	}
	return nil
}

func (x *Expression) GetBooleanLiteral() *BooleanLiteral {
	if x, ok := x.GetValue().(*Expression_BooleanLiteral); ok {
		return x.BooleanLiteral
	}
	return nil
}

func (x *Expression) GetStringLiteral() *StringLiteral {
	if x, ok := x.GetValue().(*Expression_StringLiteral); ok {
		return x.StringLiteral
	}
	return nil
}

func (x *Expression) GetArrayLiteral() *ArrayLiteral {
	if x, ok := x.GetValue().(*Expression_ArrayLiteral); ok {
		return x.ArrayLiteral
	}
	return nil
}

func (x *Expression) GetCallExpression() *CallExpression {
	if x, ok := x.GetValue().(*Expression_CallExpression); ok {
		return x.CallExpression
	}
	return nil
}

func (x *Expression) GetInfixExpression() *InfixExpression {
	if x, ok := x.GetValue().(*Expression_InfixExpression); ok {
		return x.InfixExpression
	}
	return nil
}

func (x *Expression) GetPrefixExpression() *PrefixExpression {
	if x, ok := x.GetValue().(*Expression_PrefixExpression); ok {
		return x.PrefixExpression
	}
	return nil
}

type isExpression_Value interface {
	isExpression_Value()
}

type Expression_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,1,opt,name=identifier,proto3,oneof"`
}

type Expression_IntegerLiteral struct {
	IntegerLiteral *IntegerLiteral `protobuf:"bytes,2,opt,name=integer_literal,json=integerLiteral,proto3,oneof"`
}

type Expression_BooleanLiteral struct {
	BooleanLiteral *BooleanLiteral `protobuf:"bytes,3,opt,name=boolean_literal,json=booleanLiteral,proto3,oneof"`
}

type Expression_StringLiteral struct {
	StringLiteral *StringLiteral `protobuf:"bytes,4,opt,name=string_literal,json=stringLiteral,proto3,oneof"`
}

type Expression_ArrayLiteral struct {
	ArrayLiteral *ArrayLiteral `protobuf:"bytes,5,opt,name=array_literal,json=arrayLiteral,proto3,oneof"`
}

type Expression_CallExpression struct {
	CallExpression *CallExpression `protobuf:"bytes,6,opt,name=call_expression,json=callExpression,proto3,oneof"`
}

type Expression_InfixExpression struct {
	InfixExpression *InfixExpression `protobuf:"bytes,7,opt,name=infix_expression,json=infixExpression,proto3,oneof"`
}

type Expression_PrefixExpression struct {
	PrefixExpression *PrefixExpression `protobuf:"bytes,8,opt,name=prefix_expression,json=prefixExpression,proto3,oneof"`
}

func (*Expression_Identifier) isExpression_Value() {}

func (*Expression_IntegerLiteral) isExpression_Value() {}

func (*Expression_BooleanLiteral) isExpression_Value() {}

func (*Expression_StringLiteral) isExpression_Value() {}

func (*Expression_ArrayLiteral) isExpression_Value() {}

func (*Expression_CallExpression) isExpression_Value() {}

func (*Expression_InfixExpression) isExpression_Value() {}

func (*Expression_PrefixExpression) isExpression_Value() {}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *token.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Value string       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{1}
}

func (x *Identifier) GetToken() *token.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Identifier) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IntegerLiteral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *token.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Value string       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IntegerLiteral) Reset() {
	*x = IntegerLiteral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegerLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegerLiteral) ProtoMessage() {}

// Deprecated: Use IntegerLiteral.ProtoReflect.Descriptor instead.
func (*IntegerLiteral) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{2}
}

func (x *IntegerLiteral) GetToken() *token.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *IntegerLiteral) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BooleanLiteral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *token.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Value bool         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanLiteral) Reset() {
	*x = BooleanLiteral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanLiteral) ProtoMessage() {}

// Deprecated: Use BooleanLiteral.ProtoReflect.Descriptor instead.
func (*BooleanLiteral) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{3}
}

func (x *BooleanLiteral) GetToken() *token.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *BooleanLiteral) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type StringLiteral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *token.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Value string       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringLiteral) Reset() {
	*x = StringLiteral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringLiteral) ProtoMessage() {}

// Deprecated: Use StringLiteral.ProtoReflect.Descriptor instead.
func (*StringLiteral) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{4}
}

func (x *StringLiteral) GetToken() *token.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *StringLiteral) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ArrayLiteral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *token.Token  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Elements []*Expression `protobuf:"bytes,2,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *ArrayLiteral) Reset() {
	*x = ArrayLiteral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayLiteral) ProtoMessage() {}

// Deprecated: Use ArrayLiteral.ProtoReflect.Descriptor instead.
func (*ArrayLiteral) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{5}
}

func (x *ArrayLiteral) GetToken() *token.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ArrayLiteral) GetElements() []*Expression {
	if x != nil {
		return x.Elements
	}
	return nil
}

type CallExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     *token.Token  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Function  *Identifier   `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Arguments []*Expression `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *CallExpression) Reset() {
	*x = CallExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallExpression) ProtoMessage() {}

// Deprecated: Use CallExpression.ProtoReflect.Descriptor instead.
func (*CallExpression) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{6}
}

func (x *CallExpression) GetToken() *token.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *CallExpression) GetFunction() *Identifier {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *CallExpression) GetArguments() []*Expression {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type InfixExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *token.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Left     *Expression  `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Operator string       `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Right    *Expression  `protobuf:"bytes,4,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *InfixExpression) Reset() {
	*x = InfixExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfixExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfixExpression) ProtoMessage() {}

// Deprecated: Use InfixExpression.ProtoReflect.Descriptor instead.
func (*InfixExpression) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{7}
}

func (x *InfixExpression) GetToken() *token.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *InfixExpression) GetLeft() *Expression {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *InfixExpression) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *InfixExpression) GetRight() *Expression {
	if x != nil {
		return x.Right
	}
	return nil
}

type PrefixExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    *token.Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Operator string       `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Right    *Expression  `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *PrefixExpression) Reset() {
	*x = PrefixExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_ast_ast_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixExpression) ProtoMessage() {}

// Deprecated: Use PrefixExpression.ProtoReflect.Descriptor instead.
func (*PrefixExpression) Descriptor() ([]byte, []int) {
	return file_shield_ast_ast_proto_rawDescGZIP(), []int{8}
}

func (x *PrefixExpression) GetToken() *token.Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *PrefixExpression) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *PrefixExpression) GetRight() *Expression {
	if x != nil {
		return x.Right
	}
	return nil
}

var File_shield_ast_ast_proto protoreflect.FileDescriptor

var file_shield_ast_ast_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x61, 0x73, 0x74, 0x2f, 0x61, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x61,
	0x73, 0x74, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x05, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x42, 0x0f, 0xb2, 0xe7, 0xb0, 0x2a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x5a, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x42, 0x13, 0xb2, 0xe7, 0xb0, 0x2a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x42, 0x13, 0xb2, 0xe7, 0xb0, 0x2a, 0x0e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x56, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x42, 0x12, 0xb2, 0xe7, 0xb0, 0x2a,
	0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12,
	0x52, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x42, 0x11, 0xb2, 0xe7, 0xb0, 0x2a, 0x0c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0xb2, 0xe7, 0xb0, 0x2a, 0x0e, 0x43,
	0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x5e, 0x0a, 0x10, 0x69, 0x6e, 0x66, 0x69, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0xb2, 0xe7, 0xb0, 0x2a, 0x0f, 0x49, 0x6e, 0x66,
	0x69, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f,
	0x69, 0x6e, 0x66, 0x69, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x62, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0xb2, 0xe7, 0xb0, 0x2a, 0x10, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x0a,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x04,
	0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x57, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x0e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x0c, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xab, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb8,
	0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x9d, 0x01, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x61, 0x73, 0x74, 0x42, 0x08, 0x41, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x77, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x61,
	0x73, 0x74, 0xa2, 0x02, 0x03, 0x53, 0x41, 0x58, 0xaa, 0x02, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x2e, 0x41, 0x73, 0x74, 0xca, 0x02, 0x0a, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5c, 0x41,
	0x73, 0x74, 0xe2, 0x02, 0x16, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5c, 0x41, 0x73, 0x74, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x3a, 0x3a, 0x41, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_shield_ast_ast_proto_rawDescOnce sync.Once
	file_shield_ast_ast_proto_rawDescData = file_shield_ast_ast_proto_rawDesc
)

func file_shield_ast_ast_proto_rawDescGZIP() []byte {
	file_shield_ast_ast_proto_rawDescOnce.Do(func() {
		file_shield_ast_ast_proto_rawDescData = protoimpl.X.CompressGZIP(file_shield_ast_ast_proto_rawDescData)
	})
	return file_shield_ast_ast_proto_rawDescData
}

var file_shield_ast_ast_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_shield_ast_ast_proto_goTypes = []interface{}{
	(*Expression)(nil),       // 0: shield.ast.Expression
	(*Identifier)(nil),       // 1: shield.ast.Identifier
	(*IntegerLiteral)(nil),   // 2: shield.ast.IntegerLiteral
	(*BooleanLiteral)(nil),   // 3: shield.ast.BooleanLiteral
	(*StringLiteral)(nil),    // 4: shield.ast.StringLiteral
	(*ArrayLiteral)(nil),     // 5: shield.ast.ArrayLiteral
	(*CallExpression)(nil),   // 6: shield.ast.CallExpression
	(*InfixExpression)(nil),  // 7: shield.ast.InfixExpression
	(*PrefixExpression)(nil), // 8: shield.ast.PrefixExpression
	(*token.Token)(nil),      // 9: shield.token.Token
}
var file_shield_ast_ast_proto_depIdxs = []int32{
	1,  // 0: shield.ast.Expression.identifier:type_name -> shield.ast.Identifier
	2,  // 1: shield.ast.Expression.integer_literal:type_name -> shield.ast.IntegerLiteral
	3,  // 2: shield.ast.Expression.boolean_literal:type_name -> shield.ast.BooleanLiteral
	4,  // 3: shield.ast.Expression.string_literal:type_name -> shield.ast.StringLiteral
	5,  // 4: shield.ast.Expression.array_literal:type_name -> shield.ast.ArrayLiteral
	6,  // 5: shield.ast.Expression.call_expression:type_name -> shield.ast.CallExpression
	7,  // 6: shield.ast.Expression.infix_expression:type_name -> shield.ast.InfixExpression
	8,  // 7: shield.ast.Expression.prefix_expression:type_name -> shield.ast.PrefixExpression
	9,  // 8: shield.ast.Identifier.token:type_name -> shield.token.Token
	9,  // 9: shield.ast.IntegerLiteral.token:type_name -> shield.token.Token
	9,  // 10: shield.ast.BooleanLiteral.token:type_name -> shield.token.Token
	9,  // 11: shield.ast.StringLiteral.token:type_name -> shield.token.Token
	9,  // 12: shield.ast.ArrayLiteral.token:type_name -> shield.token.Token
	0,  // 13: shield.ast.ArrayLiteral.elements:type_name -> shield.ast.Expression
	9,  // 14: shield.ast.CallExpression.token:type_name -> shield.token.Token
	1,  // 15: shield.ast.CallExpression.function:type_name -> shield.ast.Identifier
	0,  // 16: shield.ast.CallExpression.arguments:type_name -> shield.ast.Expression
	9,  // 17: shield.ast.InfixExpression.token:type_name -> shield.token.Token
	0,  // 18: shield.ast.InfixExpression.left:type_name -> shield.ast.Expression
	0,  // 19: shield.ast.InfixExpression.right:type_name -> shield.ast.Expression
	9,  // 20: shield.ast.PrefixExpression.token:type_name -> shield.token.Token
	0,  // 21: shield.ast.PrefixExpression.right:type_name -> shield.ast.Expression
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_shield_ast_ast_proto_init() }
func file_shield_ast_ast_proto_init() {
	if File_shield_ast_ast_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shield_ast_ast_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shield_ast_ast_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shield_ast_ast_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegerLiteral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shield_ast_ast_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanLiteral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shield_ast_ast_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringLiteral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shield_ast_ast_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayLiteral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shield_ast_ast_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shield_ast_ast_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfixExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shield_ast_ast_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_shield_ast_ast_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Expression_Identifier)(nil),
		(*Expression_IntegerLiteral)(nil),
		(*Expression_BooleanLiteral)(nil),
		(*Expression_StringLiteral)(nil),
		(*Expression_ArrayLiteral)(nil),
		(*Expression_CallExpression)(nil),
		(*Expression_InfixExpression)(nil),
		(*Expression_PrefixExpression)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shield_ast_ast_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shield_ast_ast_proto_goTypes,
		DependencyIndexes: file_shield_ast_ast_proto_depIdxs,
		MessageInfos:      file_shield_ast_ast_proto_msgTypes,
	}.Build()
	File_shield_ast_ast_proto = out.File
	file_shield_ast_ast_proto_rawDesc = nil
	file_shield_ast_ast_proto_goTypes = nil
	file_shield_ast_ast_proto_depIdxs = nil
}
