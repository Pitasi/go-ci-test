// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package token

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Token         protoreflect.MessageDescriptor
	fd_Token_type    protoreflect.FieldDescriptor
	fd_Token_literal protoreflect.FieldDescriptor
)

func init() {
	file_shield_token_token_proto_init()
	md_Token = File_shield_token_token_proto.Messages().ByName("Token")
	fd_Token_type = md_Token.Fields().ByName("type")
	fd_Token_literal = md_Token.Fields().ByName("literal")
}

var _ protoreflect.Message = (*fastReflection_Token)(nil)

type fastReflection_Token Token

func (x *Token) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Token)(x)
}

func (x *Token) slowProtoReflect() protoreflect.Message {
	mi := &file_shield_token_token_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Token_messageType fastReflection_Token_messageType
var _ protoreflect.MessageType = fastReflection_Token_messageType{}

type fastReflection_Token_messageType struct{}

func (x fastReflection_Token_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Token)(nil)
}
func (x fastReflection_Token_messageType) New() protoreflect.Message {
	return new(fastReflection_Token)
}
func (x fastReflection_Token_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Token
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Token) Descriptor() protoreflect.MessageDescriptor {
	return md_Token
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Token) Type() protoreflect.MessageType {
	return _fastReflection_Token_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Token) New() protoreflect.Message {
	return new(fastReflection_Token)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Token) Interface() protoreflect.ProtoMessage {
	return (*Token)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Token) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Token_type, value) {
			return
		}
	}
	if x.Literal != "" {
		value := protoreflect.ValueOfString(x.Literal)
		if !f(fd_Token_literal, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Token) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "shield.token.Token.type":
		return x.Type_ != 0
	case "shield.token.Token.literal":
		return x.Literal != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.token.Token"))
		}
		panic(fmt.Errorf("message shield.token.Token does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Token) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "shield.token.Token.type":
		x.Type_ = 0
	case "shield.token.Token.literal":
		x.Literal = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.token.Token"))
		}
		panic(fmt.Errorf("message shield.token.Token does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Token) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "shield.token.Token.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "shield.token.Token.literal":
		value := x.Literal
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.token.Token"))
		}
		panic(fmt.Errorf("message shield.token.Token does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Token) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "shield.token.Token.type":
		x.Type_ = (Type)(value.Enum())
	case "shield.token.Token.literal":
		x.Literal = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.token.Token"))
		}
		panic(fmt.Errorf("message shield.token.Token does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Token) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.token.Token.type":
		panic(fmt.Errorf("field type of message shield.token.Token is not mutable"))
	case "shield.token.Token.literal":
		panic(fmt.Errorf("field literal of message shield.token.Token is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.token.Token"))
		}
		panic(fmt.Errorf("message shield.token.Token does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Token) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "shield.token.Token.type":
		return protoreflect.ValueOfEnum(0)
	case "shield.token.Token.literal":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: shield.token.Token"))
		}
		panic(fmt.Errorf("message shield.token.Token does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Token) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in shield.token.Token", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Token) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Token) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Token) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Token) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Token)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		l = len(x.Literal)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Token)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Literal) > 0 {
			i -= len(x.Literal)
			copy(dAtA[i:], x.Literal)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Literal)))
			i--
			dAtA[i] = 0x12
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Token)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Token: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= Type(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Literal", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Literal = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: shield/token/token.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_ILLEGAL   Type = 0
	Type_EOF       Type = 1
	Type_IDENT     Type = 2
	Type_INT       Type = 3
	Type_STRING    Type = 4
	Type_COMMA     Type = 5
	Type_SEMICOLON Type = 6
	Type_LPAREN    Type = 7
	Type_RPAREN    Type = 8
	Type_LBRACKET  Type = 9
	Type_RBRACKET  Type = 10
	Type_AND       Type = 11
	Type_OR        Type = 12
	Type_EQ        Type = 13
	Type_NEQ       Type = 14
	Type_GT        Type = 15
	Type_LT        Type = 16
	Type_GTE       Type = 17
	Type_LTE       Type = 18
	Type_ADD       Type = 19
	Type_SUB       Type = 20
	Type_MUL       Type = 21
	Type_DIV       Type = 22
	Type_TRUE      Type = 23
	Type_FALSE     Type = 24
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:  "ILLEGAL",
		1:  "EOF",
		2:  "IDENT",
		3:  "INT",
		4:  "STRING",
		5:  "COMMA",
		6:  "SEMICOLON",
		7:  "LPAREN",
		8:  "RPAREN",
		9:  "LBRACKET",
		10: "RBRACKET",
		11: "AND",
		12: "OR",
		13: "EQ",
		14: "NEQ",
		15: "GT",
		16: "LT",
		17: "GTE",
		18: "LTE",
		19: "ADD",
		20: "SUB",
		21: "MUL",
		22: "DIV",
		23: "TRUE",
		24: "FALSE",
	}
	Type_value = map[string]int32{
		"ILLEGAL":   0,
		"EOF":       1,
		"IDENT":     2,
		"INT":       3,
		"STRING":    4,
		"COMMA":     5,
		"SEMICOLON": 6,
		"LPAREN":    7,
		"RPAREN":    8,
		"LBRACKET":  9,
		"RBRACKET":  10,
		"AND":       11,
		"OR":        12,
		"EQ":        13,
		"NEQ":       14,
		"GT":        15,
		"LT":        16,
		"GTE":       17,
		"LTE":       18,
		"ADD":       19,
		"SUB":       20,
		"MUL":       21,
		"DIV":       22,
		"TRUE":      23,
		"FALSE":     24,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_shield_token_token_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_shield_token_token_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_shield_token_token_proto_rawDescGZIP(), []int{0}
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type_   Type   `protobuf:"varint,1,opt,name=type,proto3,enum=shield.token.Type" json:"type,omitempty"`
	Literal string `protobuf:"bytes,2,opt,name=literal,proto3" json:"literal,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shield_token_token_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_shield_token_token_proto_rawDescGZIP(), []int{0}
}

func (x *Token) GetType_() Type {
	if x != nil {
		return x.Type_
	}
	return Type_ILLEGAL
}

func (x *Token) GetLiteral() string {
	if x != nil {
		return x.Literal
	}
	return ""
}

var File_shield_token_token_proto protoreflect.FileDescriptor

var file_shield_token_token_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x49, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x2a, 0x87, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x46,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x45, 0x4d, 0x49, 0x43, 0x4f, 0x4c, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x50, 0x41, 0x52,
	0x45, 0x4e, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x42, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x42, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x0a,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10,
	0x0c, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x0d, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51,
	0x10, 0x0e, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x0f, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54,
	0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x54, 0x45, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x13, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x55, 0x42, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x15, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x49, 0x56, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45,
	0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x18, 0x42, 0xab, 0x01,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x0a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0xa2, 0x02, 0x03, 0x53,
	0x54, 0x58, 0xaa, 0x02, 0x0c, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0xca, 0x02, 0x0c, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0xe2, 0x02, 0x18, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x3a, 0x3a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_shield_token_token_proto_rawDescOnce sync.Once
	file_shield_token_token_proto_rawDescData = file_shield_token_token_proto_rawDesc
)

func file_shield_token_token_proto_rawDescGZIP() []byte {
	file_shield_token_token_proto_rawDescOnce.Do(func() {
		file_shield_token_token_proto_rawDescData = protoimpl.X.CompressGZIP(file_shield_token_token_proto_rawDescData)
	})
	return file_shield_token_token_proto_rawDescData
}

var file_shield_token_token_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_shield_token_token_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_shield_token_token_proto_goTypes = []interface{}{
	(Type)(0),     // 0: shield.token.Type
	(*Token)(nil), // 1: shield.token.Token
}
var file_shield_token_token_proto_depIdxs = []int32{
	0, // 0: shield.token.Token.type:type_name -> shield.token.Type
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_shield_token_token_proto_init() }
func file_shield_token_token_proto_init() {
	if File_shield_token_token_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shield_token_token_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shield_token_token_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shield_token_token_proto_goTypes,
		DependencyIndexes: file_shield_token_token_proto_depIdxs,
		EnumInfos:         file_shield_token_token_proto_enumTypes,
		MessageInfos:      file_shield_token_token_proto_msgTypes,
	}.Build()
	File_shield_token_token_proto = out.File
	file_shield_token_token_proto_rawDesc = nil
	file_shield_token_token_proto_goTypes = nil
	file_shield_token_token_proto_depIdxs = nil
}
